{
/*
	 // Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	 // same ids are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/

	"if undefined": {
        "prefix": "ifund",
        "body": [
            "if (typeof $1 === \"undefined\") {",
            "\t\treturn;",
            "}"
        ]
    },

    "register command": {
        "prefix": "regComm",
        "body": [
            "vscode.commands.registerCommand(\"${1:commandName}\", () => {",
            "\t$2",
            "});"
        ]
    },

    "register command formatter": {
        "prefix": "regFormatter",
        "body": [
            "context.subscriptions.push(vscode.languages.registerDocumentFormattingEditProvider(\"${1:languageName}\", {",
            "    provideDocumentFormattingEdits: (document, options) => {",
            "        return ${2:languageFormatterFile}.${3:languageFormatterClass}.format(document, undefined, options)",
            "    }",
            "}));",
            "",
            "context.subscriptions.push(vscode.languages.registerDocumentRangeFormattingEditProvider(\"${1:languageName}\", {",
            "    provideDocumentRangeFormattingEdits: (document, options) => {",
            "        return ${2:languageFormatterFile}.${3:languageFormatterClass}.format(document, undefined, options)",
            "    }",
            "}));"
        ]
    },

    "Promisses": {
        "prefix": "retnewpromisse",
        "body": [
            "return new Promise((resolve, reject) => {",
            "    $1",
            "});"
        ],
        "description": "Promisses"
    },

	"surround with try catch": {
		"prefix": "swtc",
		"body": [
			"try",
			"{",
			"$TM_SELECTED_TEXT",
			"}"			
		],
		"description": "Suround with Try Catch"
	},
    
	"Copyright MIT Header": {
        "prefix": "crMIT",
		"body": [
            "/*---------------------------------------------------------------------------------------------",
            "*  Copyright (c) Alessandro Fragnani. All rights reserved.",
			"*  Licensed under the MIT License. See License.md in the project root for license information.",
			"*--------------------------------------------------------------------------------------------*/"			
		],
		"description": "Copyright MIT Header"
	},
    
    "Changelog Version": {
        "prefix": "clv",
        "body": [
            "changeLog.push({ kind: ChangeLogKind.VERSION, detail: { releaseNumber: \"${1:number}\", releaseDate: \"${2:date}\" } });"
        ],
        "description": "Changelog Version"
    },
    
    "Changelog Item": {
        "prefix": "cli",
        "body": [
            "changeLog.push({",
            "    kind: ChangeLogKind.${1:kindUpper},",
            "    detail: {",
            "        message: \"${2:message}\",",
            "        id: ${3:id},",
            "        kind: IssueKind.${4:kindLower}",
            "    }",
            "});"
        ],
        "description": "Changelog Version"
	}
}